---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  labels:
    app: vault-operator
  name: vaultservers.core.kubevault.com
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.nodes
    name: Nodes
    type: string
  - JSONPath: .spec.version
    name: Version
    type: string
  - JSONPath: .status.vaultStatus
    name: Status
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: Age
    type: date
  group: core.kubevault.com
  names:
    kind: VaultServer
    plural: vaultservers
    shortNames:
    - vs
    singular: vaultserver
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          description: ObjectMeta is metadata that all persisted resources must have,
            which includes all objects users must create.
          properties:
            annotations:
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
            clusterName:
              description: The name of the cluster which the object belongs to. This
                is used to distinguish resources with same name and namespace in different
                clusters. This field is not set anywhere right now and apiserver is
                going to ignore it if set in create or update request.
              type: string
            creationTimestamp:
              description: Time is a wrapper around time.Time which supports correct
                marshaling to YAML and JSON.  Wrappers are provided for many of the
                factory methods that the time package offers.
              format: date-time
              type: string
            deletionGracePeriodSeconds:
              description: Number of seconds allowed for this object to gracefully
                terminate before it will be removed from the system. Only set when
                deletionTimestamp is also set. May only be shortened. Read-only.
              format: int64
              type: integer
            deletionTimestamp:
              description: Time is a wrapper around time.Time which supports correct
                marshaling to YAML and JSON.  Wrappers are provided for many of the
                factory methods that the time package offers.
              format: date-time
              type: string
            finalizers:
              description: Must be empty before the object is deleted from the registry.
                Each entry is an identifier for the responsible component that will
                remove the entry from the list. If the deletionTimestamp of the object
                is non-nil, entries in this list can only be removed.
              items:
                type: string
              type: array
            generateName:
              description: |-
                GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

                If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).

                Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
              type: string
            generation:
              description: A sequence number representing a specific generation of
                the desired state. Populated by the system. Read-only.
              format: int64
              type: integer
            initializers:
              description: Initializers tracks the progress of initialization.
              properties:
                pending:
                  description: Pending is a list of initializers that must execute
                    in order before this object is visible. When the last pending
                    initializer is removed, and no failing result is set, the initializers
                    struct will be set to nil and the object is considered as initialized
                    and visible to all clients.
                  items:
                    description: Initializer is information about an initializer that
                      has not yet completed.
                    properties:
                      name:
                        description: name of the process that is responsible for initializing
                          this object.
                        type: string
                    required:
                    - name
                  type: array
                result:
                  description: Status is a return value for calls that don't return
                    other objects.
                  properties:
                    apiVersion:
                      description: 'APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert recognized
                        schemas to the latest internal value, and may reject unrecognized
                        values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
                      type: string
                    code:
                      description: Suggested HTTP return code for this status, 0 if
                        not set.
                      format: int32
                      type: integer
                    details:
                      description: StatusDetails is a set of additional properties
                        that MAY be set by the server to provide additional information
                        about a response. The Reason field of a Status object defines
                        what attributes will be set. Clients must ignore fields that
                        do not match the defined type of each attribute, and should
                        assume that any attribute may be empty, invalid, or under
                        defined.
                      properties:
                        causes:
                          description: The Causes array includes more details associated
                            with the StatusReason failure. Not all StatusReasons may
                            provide detailed causes.
                          items:
                            description: StatusCause provides more information about
                              an api.Status failure, including cases when multiple
                              errors are encountered.
                            properties:
                              field:
                                description: |-
                                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.

                                  Examples:
                                    "name" - the field "name" on the current resource
                                    "items[0].name" - the field "name" on the first array entry in "items"
                                type: string
                              message:
                                description: A human-readable description of the cause
                                  of the error.  This field may be presented as-is
                                  to a reader.
                                type: string
                              reason:
                                description: A machine-readable description of the
                                  cause of the error. If this value is empty there
                                  is no information available.
                                type: string
                          type: array
                        group:
                          description: The group attribute of the resource associated
                            with the status StatusReason.
                          type: string
                        kind:
                          description: 'The kind attribute of the resource associated
                            with the status StatusReason. On some operations may differ
                            from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: The name attribute of the resource associated
                            with the status StatusReason (when there is a single name
                            which can be described).
                          type: string
                        retryAfterSeconds:
                          description: If specified, the time in seconds before the
                            operation should be retried. Some errors may indicate
                            the client must take an alternate action - for those errors
                            this field may indicate how long to wait before taking
                            the alternate action.
                          format: int32
                          type: integer
                        uid:
                          description: 'UID of the resource. (when there is a single
                            resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                          type: string
                    kind:
                      description: 'Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the endpoint
                        the client submits requests to. Cannot be updated. In CamelCase.
                        More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                      type: string
                    message:
                      description: A human-readable description of the status of this
                        operation.
                      type: string
                    metadata:
                      description: ListMeta describes metadata that synthetic resources
                        must have, including lists and various status objects. A resource
                        may have only one of {ObjectMeta, ListMeta}.
                      properties:
                        continue:
                          description: continue may be set if the user set a limit
                            on the number of items returned, and indicates that the
                            server has more data available. The value is opaque and
                            may be used to issue another request to the endpoint that
                            served this list to retrieve the next set of available
                            objects. Continuing a list may not be possible if the
                            server configuration has changed or more than a few minutes
                            have passed. The resourceVersion field returned when using
                            this continue value will be identical to the value in
                            the first response.
                          type: string
                        resourceVersion:
                          description: 'String that identifies the server''s internal
                            version of this object that can be used by clients to
                            determine when objects have changed. Value must be treated
                            as opaque by clients and passed unmodified back to the
                            server. Populated by the system. Read-only. More info:
                            https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        selfLink:
                          description: selfLink is a URL representing this object.
                            Populated by the system. Read-only.
                          type: string
                    reason:
                      description: A machine-readable description of why this operation
                        is in the "Failure" status. If this value is empty there is
                        no information available. A Reason clarifies an HTTP status
                        code but does not override it.
                      type: string
                    status:
                      description: 'Status of the operation. One of: "Success" or
                        "Failure". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status'
                      type: string
              required:
              - pending
            labels:
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              maxLength: 63
              pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
              type: string
            namespace:
              description: |-
                Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

                Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
              type: string
            ownerReferences:
              description: List of objects depended by this object. If ALL objects
                in the list have been deleted, this object will be garbage collected.
                If this object is managed by a controller, then an entry in this list
                will point to this controller, with the controller field set to true.
                There cannot be more than one managing controller.
              items:
                description: OwnerReference contains enough information to let you
                  identify an owning object. Currently, an owning object must be in
                  the same namespace, so there is no namespace field.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  blockOwnerDeletion:
                    description: If true, AND if the owner has the "foregroundDeletion"
                      finalizer, then the owner cannot be deleted from the key-value
                      store until this reference is removed. Defaults to false. To
                      set this field, a user needs "delete" permission of the owner,
                      otherwise 422 (Unprocessable Entity) will be returned.
                    type: boolean
                  controller:
                    description: If true, this reference points to the managing controller.
                    type: boolean
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - uid
              type: array
            resourceVersion:
              description: |-
                An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

                Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
              type: string
            selfLink:
              description: SelfLink is a URL representing this object. Populated by
                the system. Read-only.
              type: string
            uid:
              description: |-
                UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

                Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
              type: string
        spec:
          properties:
            affinity:
              description: Affinity is a group of affinity scheduling rules.
              properties:
                nodeAffinity:
                  description: Node affinity is a group of node affinity scheduling
                    rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the affinity expressions specified by this field,
                        but it may choose a node that violates one or more of the
                        expressions. The node that is most preferred is the one with
                        the greatest sum of weights, i.e. for each node that meets
                        all of the scheduling requirements (resource request, requiredDuringScheduling
                        affinity expressions, etc.), compute a sum by iterating through
                        the elements of this field and adding "weight" to the sum
                        if the node matches the corresponding matchExpressions; the
                        node(s) with the highest sum are the most preferred.
                      items:
                        description: An empty preferred scheduling term matches all
                          objects with implicit weight 0 (i.e. it's a no-op). A null
                          preferred scheduling term matches no objects (i.e. is also
                          a no-op).
                        properties:
                          preference:
                            description: A null or empty node selector term matches
                              no objects. The requirements of them are ANDed. The
                              TopologySelectorTerm type implements a subset of the
                              NodeSelectorTerm.
                            properties:
                              matchExpressions:
                                description: A list of node selector requirements
                                  by node's labels.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchFields:
                                description: A list of node selector requirements
                                  by node's fields.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                          weight:
                            description: Weight associated with matching the corresponding
                              nodeSelectorTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - preference
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: A node selector represents the union of the results
                        of one or more label queries over a set of nodes; that is,
                        it represents the OR of the selectors represented by the node
                        selector terms.
                      properties:
                        nodeSelectorTerms:
                          description: Required. A list of node selector terms. The
                            terms are ORed.
                          items:
                            description: A null or empty node selector term matches
                              no objects. The requirements of them are ANDed. The
                              TopologySelectorTerm type implements a subset of the
                              NodeSelectorTerm.
                            properties:
                              matchExpressions:
                                description: A list of node selector requirements
                                  by node's labels.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchFields:
                                description: A list of node selector requirements
                                  by node's fields.
                                items:
                                  description: A node selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: The label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: Represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      type: string
                                    values:
                                      description: An array of string values. If the
                                        operator is In or NotIn, the values array
                                        must be non-empty. If the operator is Exists
                                        or DoesNotExist, the values array must be
                                        empty. If the operator is Gt or Lt, the values
                                        array must have a single element, which will
                                        be interpreted as an integer. This array is
                                        replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                          type: array
                      required:
                      - nodeSelectorTerms
                podAffinity:
                  description: Pod affinity is a group of inter pod affinity scheduling
                    rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the affinity expressions specified by this field,
                        but it may choose a node that violates one or more of the
                        expressions. The node that is most preferred is the one with
                        the greatest sum of weights, i.e. for each node that meets
                        all of the scheduling requirements (resource request, requiredDuringScheduling
                        affinity expressions, etc.), compute a sum by iterating through
                        the elements of this field and adding "weight" to the sum
                        if the node has pods which matches the corresponding podAffinityTerm;
                        the node(s) with the highest sum are the most preferred.
                      items:
                        description: The weights of all of the matched WeightedPodAffinityTerm
                          fields are added per-node to find the most preferred node(s)
                        properties:
                          podAffinityTerm:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label selector is a label query over
                                  a set of resources. The result of matchLabels and
                                  matchExpressions are ANDed. An empty label selector
                                  matches all objects. A null label selector matches
                                  no objects.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                    type: array
                                  matchLabels:
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                          weight:
                            description: weight associated with matching the corresponding
                              podAffinityTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - podAffinityTerm
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: If the affinity requirements specified by this
                        field are not met at scheduling time, the pod will not be
                        scheduled onto the node. If the affinity requirements specified
                        by this field cease to be met at some point during pod execution
                        (e.g. due to a pod label update), the system may or may not
                        try to eventually evict the pod from its node. When there
                        are multiple elements, the lists of nodes corresponding to
                        each podAffinityTerm are intersected, i.e. all terms must
                        be satisfied.
                      items:
                        description: Defines a set of pods (namely those matching
                          the labelSelector relative to the given namespace(s)) that
                          this pod should be co-located (affinity) or not co-located
                          (anti-affinity) with, where co-located is defined as running
                          on a node whose value of the label with key <topologyKey>
                          matches that of any node on which a pod of the set of pods
                          is running
                        properties:
                          labelSelector:
                            description: A label selector is a label query over a
                              set of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchLabels:
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                          namespaces:
                            description: namespaces specifies which namespaces the
                              labelSelector applies to (matches against); null or
                              empty list means "this pod's namespace"
                            items:
                              type: string
                            type: array
                          topologyKey:
                            description: This pod should be co-located (affinity)
                              or not co-located (anti-affinity) with the pods matching
                              the labelSelector in the specified namespaces, where
                              co-located is defined as running on a node whose value
                              of the label with key topologyKey matches that of any
                              node on which any of the selected pods is running. Empty
                              topologyKey is not allowed.
                            type: string
                        required:
                        - topologyKey
                      type: array
                podAntiAffinity:
                  description: Pod anti affinity is a group of inter pod anti affinity
                    scheduling rules.
                  properties:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      description: The scheduler will prefer to schedule pods to nodes
                        that satisfy the anti-affinity expressions specified by this
                        field, but it may choose a node that violates one or more
                        of the expressions. The node that is most preferred is the
                        one with the greatest sum of weights, i.e. for each node that
                        meets all of the scheduling requirements (resource request,
                        requiredDuringScheduling anti-affinity expressions, etc.),
                        compute a sum by iterating through the elements of this field
                        and adding "weight" to the sum if the node has pods which
                        matches the corresponding podAffinityTerm; the node(s) with
                        the highest sum are the most preferred.
                      items:
                        description: The weights of all of the matched WeightedPodAffinityTerm
                          fields are added per-node to find the most preferred node(s)
                        properties:
                          podAffinityTerm:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label selector is a label query over
                                  a set of resources. The result of matchLabels and
                                  matchExpressions are ANDed. An empty label selector
                                  matches all objects. A null label selector matches
                                  no objects.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                    type: array
                                  matchLabels:
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                          weight:
                            description: weight associated with matching the corresponding
                              podAffinityTerm, in the range 1-100.
                            format: int32
                            type: integer
                        required:
                        - weight
                        - podAffinityTerm
                      type: array
                    requiredDuringSchedulingIgnoredDuringExecution:
                      description: If the anti-affinity requirements specified by
                        this field are not met at scheduling time, the pod will not
                        be scheduled onto the node. If the anti-affinity requirements
                        specified by this field cease to be met at some point during
                        pod execution (e.g. due to a pod label update), the system
                        may or may not try to eventually evict the pod from its node.
                        When there are multiple elements, the lists of nodes corresponding
                        to each podAffinityTerm are intersected, i.e. all terms must
                        be satisfied.
                      items:
                        description: Defines a set of pods (namely those matching
                          the labelSelector relative to the given namespace(s)) that
                          this pod should be co-located (affinity) or not co-located
                          (anti-affinity) with, where co-located is defined as running
                          on a node whose value of the label with key <topologyKey>
                          matches that of any node on which a pod of the set of pods
                          is running
                        properties:
                          labelSelector:
                            description: A label selector is a label query over a
                              set of resources. The result of matchLabels and matchExpressions
                              are ANDed. An empty label selector matches all objects.
                              A null label selector matches no objects.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                type: array
                              matchLabels:
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                          namespaces:
                            description: namespaces specifies which namespaces the
                              labelSelector applies to (matches against); null or
                              empty list means "this pod's namespace"
                            items:
                              type: string
                            type: array
                          topologyKey:
                            description: This pod should be co-located (affinity)
                              or not co-located (anti-affinity) with the pods matching
                              the labelSelector in the specified namespaces, where
                              co-located is defined as running on a node whose value
                              of the label with key topologyKey matches that of any
                              node on which any of the selected pods is running. Empty
                              topologyKey is not allowed.
                            type: string
                        required:
                        - topologyKey
                      type: array
            backendStorage:
              description: BackendStorageSpec defines storage backend configuration
                of vault
              properties:
                azure:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/azure.html

                    AzureSpec defines configuration to set up Google Cloud Storage as backend storage in vault
                  properties:
                    accountKey:
                      description: Specifies the Azure Storage account key.
                      type: string
                    accountName:
                      description: Specifies the Azure Storage account name.
                      type: string
                    container:
                      description: Specifies the Azure Storage Blob container name.
                      type: string
                    maxParallel:
                      description: |2-

                         Specifies the maximum number of concurrent operations to take place.
                      format: int32
                      type: integer
                  required:
                  - accountName
                  - accountKey
                  - container
                dynamoDB:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/dynamodb.html

                    DynamoDBSpec defines configuration to set up DynamoDB Storage as backend storage in vault
                  properties:
                    credentialSecret:
                      description: "Specifies the secret name containing AWS access
                        key and AWS secret key secret data:\n\t- access_key=<value>\n
                        - secret_key=<value>"
                      type: string
                    endPoint:
                      description: Specifies an alternative, AWS compatible, DynamoDB
                        endpoint.
                      type: string
                    haEnabled:
                      description: Specifies whether this backend should be used to
                        run Vault in high availability mode.
                      type: boolean
                    maxParallel:
                      description: Specifies the maximum number of parallel operations
                        to take place.
                      format: int32
                      type: integer
                    readCapacity:
                      description: Specifies the maximum number of reads consumed
                        per second on the table
                      format: int32
                      type: integer
                    region:
                      description: Specifies the AWS region
                      type: string
                    sessionTokenSecret:
                      description: "Specifies the secret name containing AWS session
                        token secret data:\n\t- session_token:<value>"
                      type: string
                    table:
                      description: 'Specifies the name of the DynamoDB table in which
                        to store Vault data. If the specified table does not yet exist,
                        it will be created during initialization. default: vault-dynamodb-backend'
                      type: string
                    writeCapacity:
                      description: Specifies the maximum number of writes performed
                        per second on the table.
                      format: int32
                      type: integer
                  required:
                  - readCapacity
                etcd:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/etcd.html

                    EtcdSpec defines configuration to set up etcd as backend storage in vault
                  properties:
                    address:
                      description: Specifies the addresses of the etcd instances
                      type: string
                    credentialSecretName:
                      description: "Specifies the secret name that contain username
                        and password to use when authenticating with the etcd server
                        secret data:\n\t- username:<value>\n\t- password:<value>"
                      type: string
                    discoverySrv:
                      description: Specifies the domain name to query for SRV records
                        describing cluster endpoints
                      type: string
                    etcdApi:
                      description: Specifies the version of the API to communicate
                        with etcd
                      type: string
                    haEnable:
                      description: Specifies if high availability should be enabled
                      type: boolean
                    path:
                      description: Specifies the path in etcd where vault data will
                        be stored
                      type: string
                    sync:
                      description: Specifies whether to sync list of available etcd
                        services on startup
                      type: boolean
                    tlsSecretName:
                      description: Specifies the secret name that contains tls_ca_file,
                        tls_cert_file and tls_key_file for etcd communication
                      type: string
                file:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/filesystem.html

                    FileSpec defines configuration to set up File system Storage as backend storage in vault
                  properties:
                    path:
                      description: The absolute path on disk to the directory where
                        the data will be stored. If the directory does not exist,
                        Vault will create it.
                      type: string
                  required:
                  - path
                gcs:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/google-cloud-storage.html

                    GcsSpec defines configuration to set up Google Cloud Storage as backend storage in vault
                  properties:
                    bucket:
                      description: Specifies the name of the bucket to use for storage.
                      type: string
                    chunkSize:
                      description: Specifies the maximum size (in kilobytes) to send
                        in a single request. If set to 0, it will attempt to send
                        the whole object at once, but will not retry any failures.
                      type: string
                    credentialSecret:
                      description: "Secret containing Google application credential
                        secret data:\n\t- sa.json:<value>"
                      type: string
                    haEnabled:
                      description: Specifies if high availability mode is enabled.
                      type: boolean
                    maxParallel:
                      description: |2-

                         Specifies the maximum number of parallel operations to take place.
                      format: int32
                      type: integer
                  required:
                  - bucket
                inmem:
                  description: 'ref: https://www.vaultproject.io/docs/configuration/storage/in-memory.html'
                  type: boolean
                mySQL:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/mysql.html

                    MySQLSpec defines configuration to set up MySQL Storage as backend storage in vault
                  properties:
                    address:
                      description: Specifies the address of the MySQL host.
                      type: string
                    database:
                      description: Specifies the name of the database. If the database
                        does not exist, Vault will attempt to create it.
                      type: string
                    maxParallel:
                      description: |2-

                         Specifies the maximum number of concurrent requests to take place.
                      format: int32
                      type: integer
                    table:
                      description: Specifies the name of the table. If the table does
                        not exist, Vault will attempt to create it.
                      type: string
                    tlsCASecret:
                      description: "Specifies the name of the secret containing the
                        CA certificate to connect using TLS. secret data:\n\t- ca=<ca_cert>"
                      type: string
                    userCredentialSecret:
                      description: "Specifies the MySQL username and password to connect
                        to the database secret data:\n\t- username=<value>\n\t- password=<value>"
                      type: string
                  required:
                  - userCredentialSecret
                postgreSQL:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/postgresql.html

                    PostgreSQLSpec defines configuration to set up PostgreSQL storage as backend storage in vault
                  properties:
                    connectionUrlSecret:
                      description: "Specifies the name of the secret containing the
                        connection string to use to authenticate and connect to PostgreSQL.
                        A full list of supported parameters can be found in the pq
                        library documentation(https://godoc.org/github.com/lib/pq#hdr-Connection_String_Parameters).
                        secret data:\n\t- connection_url:<data>"
                      type: string
                    maxParallel:
                      description: |2-

                         Specifies the maximum number of concurrent requests to take place.
                      format: int32
                      type: integer
                    table:
                      description: Specifies the name of the table in which to write
                        Vault data. This table must already exist (Vault will not
                        attempt to create it).
                      type: string
                  required:
                  - connectionUrlSecret
                s3:
                  description: |-
                    vault doc: https://www.vaultproject.io/docs/configuration/storage/s3.html

                    S3Spec defines configuration to set up Amazon S3 Storage as backend storage in vault
                  properties:
                    bucket:
                      description: Specifies the name of the bucket to use for storage.
                      type: string
                    credentialSecret:
                      description: "Specifies the secret name containing AWS access
                        key and AWS secret key secret data:\n\t- access_key=<value>\n
                        - secret_key=<value>"
                      type: string
                    disableSSL:
                      description: Specifies if SSL should be used for the endpoint
                        connection
                      type: boolean
                    endPoint:
                      description: Specifies an alternative, AWS compatible, S3 endpoint.
                      type: string
                    maxParallel:
                      description: Specifies the maximum number of parallel operations
                        to take place.
                      format: int32
                      type: integer
                    region:
                      description: Specifies the AWS region
                      type: string
                    s3ForcePathStyle:
                      description: Specifies whether to use host bucket style domains
                        with the configured endpoint.
                      type: boolean
                    sessionTokenSecret:
                      description: "Specifies the secret name containing AWS session
                        token secret data:\n\t- session_token:<value>"
                      type: string
                  required:
                  - bucket
            baseImage:
              description: Base image to use for a Vault deployment.
              type: string
            configMapName:
              description: Name of the ConfigMap for Vault's configuration In this
                configMap contain extra config for vault
              type: string
            imagePullSecrets:
              description: 'ImagePullSecrets is an optional list of references to
                secrets in the same namespace to use for pulling any of the images
                used by this PodSpec. If specified, these secrets will be passed to
                individual puller implementations for them to use. For example, in
                the case of docker, only DockerConfig type secrets are honored. More
                info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod'
              items:
                description: LocalObjectReference contains enough information to let
                  you locate the referenced object inside the same namespace.
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
              type: array
            nodeSelector:
              description: 'NodeSelector is a selector which must be true for the
                pod to fit on a node. Selector which must match a node''s labels for
                the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
              type: object
            nodes:
              description: 'Number of nodes to deploy for a Vault deployment. Default:
                1.'
              format: int32
              type: integer
            resources:
              description: ResourceRequirements describes the compute resource requirements.
              properties:
                limits:
                  description: 'Limits describes the maximum amount of compute resources
                    allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                  type: object
                requests:
                  description: 'Requests describes the minimum amount of compute resources
                    required. If Requests is omitted for a container, it defaults
                    to Limits if that is explicitly specified, otherwise to an implementation-defined
                    value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                  type: object
            schedulerName:
              description: If specified, the pod will be dispatched by specified scheduler.
                If not specified, the pod will be dispatched by default scheduler.
              type: string
            tls:
              description: TLSPolicy defines the TLS policy of the vault nodes If
                this is not set, operator will auto-gen TLS assets and secrets.
              properties:
                tlsSecret:
                  description: "TLSSecret is the secret containing TLS certs used
                    by each vault node for the communication between the vault server
                    and its clients. The secret should contain three files:\n\t- ca.crt\n\t-
                    server.crt\n\t- server.key\n\nThe server certificate must allow
                    the following wildcard domains:\n\t- localhost\n\t- *.<namespace>.pod\n\t-
                    <vaultServer-name>.<namespace>.svc"
                  type: string
              required:
              - tlsSecret
            tolerations:
              description: If specified, the pod's tolerations.
              items:
                description: The pod this Toleration is attached to tolerates any
                  taint that matches the triple <key,value,effect> using the matching
                  operator <operator>.
                properties:
                  effect:
                    description: Effect indicates the taint effect to match. Empty
                      means match all taint effects. When specified, allowed values
                      are NoSchedule, PreferNoSchedule and NoExecute.
                    type: string
                  key:
                    description: Key is the taint key that the toleration applies
                      to. Empty means match all taint keys. If the key is empty, operator
                      must be Exists; this combination means to match all values and
                      all keys.
                    type: string
                  operator:
                    description: Operator represents a key's relationship to the value.
                      Valid operators are Exists and Equal. Defaults to Equal. Exists
                      is equivalent to wildcard for value, so that a pod can tolerate
                      all taints of a particular category.
                    type: string
                  tolerationSeconds:
                    description: TolerationSeconds represents the period of time the
                      toleration (which must be of effect NoExecute, otherwise this
                      field is ignored) tolerates the taint. By default, it is not
                      set, which means tolerate the taint forever (do not evict).
                      Zero and negative values will be treated as 0 (evict immediately)
                      by the system.
                    format: int64
                    type: integer
                  value:
                    description: Value is the taint value the toleration matches to.
                      If the operator is Exists, the value should be empty, otherwise
                      just a regular string.
                    type: string
              type: array
            unsealer:
              description: UnsealerSpec contain the configuration for auto vault initialize/unseal
              properties:
                insecureTLS:
                  description: To skip tls verification when communicating with vault
                    server
                  type: boolean
                mode:
                  description: ModeSpec contain unseal mechanism
                  properties:
                    awsKmsSsm:
                      description: AwsKmsSsmSpec contain the fields that required
                        to unseal vault using aws kms ssm
                      properties:
                        credentialSecret:
                          description: "Specifies the secret name containing AWS access
                            key and AWS secret key secret data:\n\t- access_key:<value>\n
                            - secret_key:<value>"
                          type: string
                        kmsKeyID:
                          description: The ID or ARN of the AWS KMS key to encrypt
                            values
                          type: string
                        region:
                          type: string
                      required:
                      - kmsKeyID
                    azureKeyVault:
                      description: AzureKeyVault contain the fields that required
                        to unseal vault using azure key vault
                      properties:
                        aadClientSecret:
                          description: "Specifies the name of secret containing client
                            id and client secret of AAD application secret data:\n\t-
                            client-id:<value>\n\t- client-secret:<value>"
                          type: string
                        clientCertSecret:
                          description: "Specifies the name of secret containing client
                            cert and client cert password secret data:\n\t- client-cert:<value>\n\t-
                            client-cert-password: <value>"
                          type: string
                        cloud:
                          description: 'The cloud environment identifier default:
                            "AZUREPUBLICCLOUD"'
                          type: string
                        tenantID:
                          description: The AAD Tenant ID
                          type: string
                        useManagedIdentity:
                          description: Use managed service identity for the virtual
                            machine
                          type: boolean
                        vaultBaseUrl:
                          description: Azure key vault url, for example https://myvault.vault.azure.net
                          type: string
                      required:
                      - vaultBaseUrl
                      - tenantID
                    googleKmsGcs:
                      description: GoogleKmsGcsSpec contain the fields that required
                        to unseal vault using google kms
                      properties:
                        bucket:
                          description: The name of the Google Cloud Storage bucket
                            to store values in
                          type: string
                        credentialSecret:
                          description: "Secret containing Google application credential
                            secret data:\n\t- sa.json:<value>"
                          type: string
                        kmsCryptoKey:
                          description: The name of the Google Cloud KMS crypto key
                            to use
                          type: string
                        kmsKeyRing:
                          description: The name of the Google Cloud KMS key ring to
                            use
                          type: string
                        kmsLocation:
                          description: The Google Cloud KMS location to use (eg. 'global',
                            'europe-west1')
                          type: string
                        kmsProject:
                          description: The Google Cloud KMS project to use
                          type: string
                      required:
                      - kmsCryptoKey
                      - kmsKeyRing
                      - kmsLocation
                      - kmsProject
                      - bucket
                    kubernetesSecret:
                      description: KubernetesSecretSpec contain the fields that required
                        to unseal using kubernetes secret
                      properties:
                        secretName:
                          type: string
                      required:
                      - secretName
                overwriteExisting:
                  description: overwrite existing unseal keys and root tokens, possibly
                    dangerous!
                  type: boolean
                retryPeriodSeconds:
                  description: How often to attempt to unseal the vault instance
                  format: int64
                  type: integer
                secretShares:
                  description: Total count of secret shares that exist
                  format: int32
                  type: integer
                secretThreshold:
                  description: Minimum required secret shares to unseal
                  format: int32
                  type: integer
                storeRootToken:
                  description: should the root token be stored in the key store (default
                    true)
                  type: boolean
                vaultCASecret:
                  description: Secret name containing self signed ca cert of vault
                  type: string
            version:
              description: Version of Vault to be deployed.
              type: string
          required:
          - baseImage
          - version
          - backendStorage
        status:
          properties:
            clientPort:
              description: ClientPort is the port for vault client to access. It's
                the same on client LB service and vault nodes.
              format: int32
              type: integer
            initialized:
              description: Initialized indicates if the Vault service is initialized.
              type: boolean
            phase:
              description: |-
                Phase indicates the state this Vault cluster jumps in. Phase goes as one way as below:
                  Initial -> Running
              type: string
            serviceName:
              description: ServiceName is the LB service for accessing vault nodes.
              type: string
            updatedNodes:
              description: PodNames of updated Vault nodes. Updated means the Vault
                container image version matches the spec's version.
              items:
                type: string
              type: array
            vaultStatus:
              properties:
                active:
                  description: PodName of the active Vault node. Active node is unsealed.
                    Only active node can serve requests. Vault service only points
                    to the active node.
                  type: string
                sealed:
                  description: PodNames of Sealed Vault nodes. Sealed nodes MUST be
                    unsealed to become standby or leader.
                  items:
                    type: string
                  type: array
                standby:
                  description: PodNames of the standby Vault nodes. Standby nodes
                    are unsealed. Standby nodes do not process requests, and instead
                    redirect to the active Vault.
                  items:
                    type: string
                  type: array
                unsealed:
                  description: PodNames of Unsealed Vault nodes.
                  items:
                    type: string
                  type: array
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
