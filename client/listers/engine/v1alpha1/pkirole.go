/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubevault.dev/apimachinery/apis/engine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PKIRoleLister helps list PKIRoles.
// All objects returned here must be treated as read-only.
type PKIRoleLister interface {
	// List lists all PKIRoles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PKIRole, err error)
	// PKIRoles returns an object that can list and get PKIRoles.
	PKIRoles(namespace string) PKIRoleNamespaceLister
	PKIRoleListerExpansion
}

// pKIRoleLister implements the PKIRoleLister interface.
type pKIRoleLister struct {
	indexer cache.Indexer
}

// NewPKIRoleLister returns a new PKIRoleLister.
func NewPKIRoleLister(indexer cache.Indexer) PKIRoleLister {
	return &pKIRoleLister{indexer: indexer}
}

// List lists all PKIRoles in the indexer.
func (s *pKIRoleLister) List(selector labels.Selector) (ret []*v1alpha1.PKIRole, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PKIRole))
	})
	return ret, err
}

// PKIRoles returns an object that can list and get PKIRoles.
func (s *pKIRoleLister) PKIRoles(namespace string) PKIRoleNamespaceLister {
	return pKIRoleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PKIRoleNamespaceLister helps list and get PKIRoles.
// All objects returned here must be treated as read-only.
type PKIRoleNamespaceLister interface {
	// List lists all PKIRoles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PKIRole, err error)
	// Get retrieves the PKIRole from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PKIRole, error)
	PKIRoleNamespaceListerExpansion
}

// pKIRoleNamespaceLister implements the PKIRoleNamespaceLister
// interface.
type pKIRoleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PKIRoles in the indexer for a given namespace.
func (s pKIRoleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PKIRole, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PKIRole))
	})
	return ret, err
}

// Get retrieves the PKIRole from the indexer for a given namespace and name.
func (s pKIRoleNamespaceLister) Get(name string) (*v1alpha1.PKIRole, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pkirole"), name)
	}
	return obj.(*v1alpha1.PKIRole), nil
}
