/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubevault.dev/apimachinery/apis/engine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretAccessRequestLister helps list SecretAccessRequests.
// All objects returned here must be treated as read-only.
type SecretAccessRequestLister interface {
	// List lists all SecretAccessRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretAccessRequest, err error)
	// SecretAccessRequests returns an object that can list and get SecretAccessRequests.
	SecretAccessRequests(namespace string) SecretAccessRequestNamespaceLister
	SecretAccessRequestListerExpansion
}

// secretAccessRequestLister implements the SecretAccessRequestLister interface.
type secretAccessRequestLister struct {
	indexer cache.Indexer
}

// NewSecretAccessRequestLister returns a new SecretAccessRequestLister.
func NewSecretAccessRequestLister(indexer cache.Indexer) SecretAccessRequestLister {
	return &secretAccessRequestLister{indexer: indexer}
}

// List lists all SecretAccessRequests in the indexer.
func (s *secretAccessRequestLister) List(selector labels.Selector) (ret []*v1alpha1.SecretAccessRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretAccessRequest))
	})
	return ret, err
}

// SecretAccessRequests returns an object that can list and get SecretAccessRequests.
func (s *secretAccessRequestLister) SecretAccessRequests(namespace string) SecretAccessRequestNamespaceLister {
	return secretAccessRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretAccessRequestNamespaceLister helps list and get SecretAccessRequests.
// All objects returned here must be treated as read-only.
type SecretAccessRequestNamespaceLister interface {
	// List lists all SecretAccessRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretAccessRequest, err error)
	// Get retrieves the SecretAccessRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretAccessRequest, error)
	SecretAccessRequestNamespaceListerExpansion
}

// secretAccessRequestNamespaceLister implements the SecretAccessRequestNamespaceLister
// interface.
type secretAccessRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretAccessRequests in the indexer for a given namespace.
func (s secretAccessRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretAccessRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretAccessRequest))
	})
	return ret, err
}

// Get retrieves the SecretAccessRequest from the indexer for a given namespace and name.
func (s secretAccessRequestNamespaceLister) Get(name string) (*v1alpha1.SecretAccessRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretaccessrequest"), name)
	}
	return obj.(*v1alpha1.SecretAccessRequest), nil
}
