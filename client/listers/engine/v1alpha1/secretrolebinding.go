/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubevault.dev/apimachinery/apis/engine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecretRoleBindingLister helps list SecretRoleBindings.
// All objects returned here must be treated as read-only.
type SecretRoleBindingLister interface {
	// List lists all SecretRoleBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretRoleBinding, err error)
	// SecretRoleBindings returns an object that can list and get SecretRoleBindings.
	SecretRoleBindings(namespace string) SecretRoleBindingNamespaceLister
	SecretRoleBindingListerExpansion
}

// secretRoleBindingLister implements the SecretRoleBindingLister interface.
type secretRoleBindingLister struct {
	indexer cache.Indexer
}

// NewSecretRoleBindingLister returns a new SecretRoleBindingLister.
func NewSecretRoleBindingLister(indexer cache.Indexer) SecretRoleBindingLister {
	return &secretRoleBindingLister{indexer: indexer}
}

// List lists all SecretRoleBindings in the indexer.
func (s *secretRoleBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SecretRoleBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretRoleBinding))
	})
	return ret, err
}

// SecretRoleBindings returns an object that can list and get SecretRoleBindings.
func (s *secretRoleBindingLister) SecretRoleBindings(namespace string) SecretRoleBindingNamespaceLister {
	return secretRoleBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecretRoleBindingNamespaceLister helps list and get SecretRoleBindings.
// All objects returned here must be treated as read-only.
type SecretRoleBindingNamespaceLister interface {
	// List lists all SecretRoleBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecretRoleBinding, err error)
	// Get retrieves the SecretRoleBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecretRoleBinding, error)
	SecretRoleBindingNamespaceListerExpansion
}

// secretRoleBindingNamespaceLister implements the SecretRoleBindingNamespaceLister
// interface.
type secretRoleBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecretRoleBindings in the indexer for a given namespace.
func (s secretRoleBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecretRoleBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecretRoleBinding))
	})
	return ret, err
}

// Get retrieves the SecretRoleBinding from the indexer for a given namespace and name.
func (s secretRoleBindingNamespaceLister) Get(name string) (*v1alpha1.SecretRoleBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("secretrolebinding"), name)
	}
	return obj.(*v1alpha1.SecretRoleBinding), nil
}
