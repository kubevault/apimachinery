/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubevault.dev/apimachinery/apis/ops/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultOpsRequestLister helps list VaultOpsRequests.
// All objects returned here must be treated as read-only.
type VaultOpsRequestLister interface {
	// List lists all VaultOpsRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultOpsRequest, err error)
	// VaultOpsRequests returns an object that can list and get VaultOpsRequests.
	VaultOpsRequests(namespace string) VaultOpsRequestNamespaceLister
	VaultOpsRequestListerExpansion
}

// vaultOpsRequestLister implements the VaultOpsRequestLister interface.
type vaultOpsRequestLister struct {
	indexer cache.Indexer
}

// NewVaultOpsRequestLister returns a new VaultOpsRequestLister.
func NewVaultOpsRequestLister(indexer cache.Indexer) VaultOpsRequestLister {
	return &vaultOpsRequestLister{indexer: indexer}
}

// List lists all VaultOpsRequests in the indexer.
func (s *vaultOpsRequestLister) List(selector labels.Selector) (ret []*v1alpha1.VaultOpsRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultOpsRequest))
	})
	return ret, err
}

// VaultOpsRequests returns an object that can list and get VaultOpsRequests.
func (s *vaultOpsRequestLister) VaultOpsRequests(namespace string) VaultOpsRequestNamespaceLister {
	return vaultOpsRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultOpsRequestNamespaceLister helps list and get VaultOpsRequests.
// All objects returned here must be treated as read-only.
type VaultOpsRequestNamespaceLister interface {
	// List lists all VaultOpsRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VaultOpsRequest, err error)
	// Get retrieves the VaultOpsRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VaultOpsRequest, error)
	VaultOpsRequestNamespaceListerExpansion
}

// vaultOpsRequestNamespaceLister implements the VaultOpsRequestNamespaceLister
// interface.
type vaultOpsRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultOpsRequests in the indexer for a given namespace.
func (s vaultOpsRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultOpsRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultOpsRequest))
	})
	return ret, err
}

// Get retrieves the VaultOpsRequest from the indexer for a given namespace and name.
func (s vaultOpsRequestNamespaceLister) Get(name string) (*v1alpha1.VaultOpsRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultopsrequest"), name)
	}
	return obj.(*v1alpha1.VaultOpsRequest), nil
}
