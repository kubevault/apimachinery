/*
Copyright 2019 The KubeDB Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "kubedb.dev/apimachinery/apis/kubedb/v1alpha1"
)

// PerconaLister helps list Perconas.
type PerconaLister interface {
	// List lists all Perconas in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Percona, err error)
	// Perconas returns an object that can list and get Perconas.
	Perconas(namespace string) PerconaNamespaceLister
	PerconaListerExpansion
}

// perconaLister implements the PerconaLister interface.
type perconaLister struct {
	indexer cache.Indexer
}

// NewPerconaLister returns a new PerconaLister.
func NewPerconaLister(indexer cache.Indexer) PerconaLister {
	return &perconaLister{indexer: indexer}
}

// List lists all Perconas in the indexer.
func (s *perconaLister) List(selector labels.Selector) (ret []*v1alpha1.Percona, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Percona))
	})
	return ret, err
}

// Perconas returns an object that can list and get Perconas.
func (s *perconaLister) Perconas(namespace string) PerconaNamespaceLister {
	return perconaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PerconaNamespaceLister helps list and get Perconas.
type PerconaNamespaceLister interface {
	// List lists all Perconas in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Percona, err error)
	// Get retrieves the Percona from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Percona, error)
	PerconaNamespaceListerExpansion
}

// perconaNamespaceLister implements the PerconaNamespaceLister
// interface.
type perconaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Perconas in the indexer for a given namespace.
func (s perconaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Percona, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Percona))
	})
	return ret, err
}

// Get retrieves the Percona from the indexer for a given namespace and name.
func (s perconaNamespaceLister) Get(name string) (*v1alpha1.Percona, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("percona"), name)
	}
	return obj.(*v1alpha1.Percona), nil
}
